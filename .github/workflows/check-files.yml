# To use this do the following...
#
# As the first job, add the call to this workflow...
# jobs:
#   checkfiles:
#     uses: looker-open-source/check-files.yml@main
#
# For subsequent jobs add a needs: checkfiles clause, or add it to an array if
# there already is a call like that. Then use the output of checkfiles in an
# if clause.:
#
# jobs:
#   checkfiles:
#     uses: looker-open-source/check-files.yml@main
#   job2:
#     name: Job Two
#     needs: checkfiles
#     if: needs.checkfiles.outputs.python
#
#   job3:
#     name: Job Three
#     needs: [checkfiles, some_other_job]
#     if: fromJSON(needs.checkfiles.outputs.filters).tssdk
#
# The full output of this workflow is available as needs.checkfiles.outputs.filters. It is encoded as JSON
# and different attributes can be accessed by wrapping it in fromJSON(). The full output will also
# provide a list of the files that matched a pattern under names like apix_files, codegen_files, etc.
#
# The filters apix, codegen, hackathon, python, resources, and tssdk are also defined
# as individual outputs.
#
# To add a new filter, add it to the list in the filter step. Then define the output
# of the checkfiles job to include that step output. Finally define the output of the
# checkfiles job in the list of outputs for the workflow_call.

name: Callable File Pattern Check
on:
  workflow_call:
    outputs:
      filters:
        description: "The full output as a JSON"
        value: ${{ jobs.checkfiles.outputs.filters }}
      apix:
        description: "The value of the apix filter"
        value: ${{ jobs.checkfiles.outputs.apix }}
      codegen:
        description: "The value of the codegen filter"
        value: ${{ jobs.checkfiles.outputs.codegen }}
      hackathon:
        description: "The value of the hackathon filter"
        value: ${{ jobs.checkfiles.outputs.hackathon }}
      python:
        description: "The value of the python filter"
        value: ${{ jobs.checkfiles.outputs.python }}
      resources:
        description: "The value of the resources filter"
        value: ${{ jobs.checkfiles.outputs.resources }}
      tssdk:
        description: "The value of the tssdk filter"
        value: ${{ jobs.checkfiles.outputs.tssdk }}

jobs:
  checkfiles:
    runs-on: ubuntu-latest
    outputs:
      filters: ${{ toJSON(steps.filter.outputs) }}
      apix: ${{ steps.filter.outputs.apix }}
      codegen: ${{ steps.filter.outputs.codegen }}
      hackathon: ${{ steps.filter.outputs.hackathon }}
      python: ${{ steps.filter.outputs.python }}
      resources: ${{ steps.filter.outputs.resources }}
      tssdk: ${{ steps.filter.outputs.tssdk }}

    steps:
      - name: Repo Checkout
        uses: actions/checkout@v2

      - uses: tony84727/changed-file-filter@v0.2.0
        id: filter
        with:
        # head: optional head commit SHA, default to ${{ github.event.pull_request.head.sha || github.sha }}
        # base: optional base commit SHA, default to ${{ github.event.pull_request.base.sha }}
        # or HEAD^ if not triggered by pull_request

        # filter rules in YAML format
        # <rule-name>:
        #  - <glob expression>
          filters: |
            apix:
              - packages/code-editor/**
              - packages/run-it/**
              - packages/api-explorer/**
              - packages/extension-api-explorer/**
              - packages/extension-utils/**
            codegen:
              - packages/sdk-codegen/**
              - packages/sdk-codegen-utils/**
              - packages/sdk-codegen-scripts/**
            hackathon:
              - packages/wholly-sheet/**
              - packages/hackathon/**
            python:
              - python/**
            resources:
              - bin/looker-resources-index/**
              - docs/resources/**
            tssdk:
              - packages/sdk/**
              - packages/sdk-rtl/**
              - packages/sdk-node/**
              - packages/extension-sdk/**
              - packages/extension-sdk-react/**
              - packages/extension-utils/**
      - run: |
          echo "${{ toJSON(steps.filter.outputs) }}"
          echo "apix: ${{ steps.filter.outputs.apix }}"
          echo "codegen: ${{ steps.filter.outputs.codegen }}"
          echo "hackathon: ${{ steps.filter.outputs.hackathon }}"
          echo "python: ${{ steps.filter.outputs.python }}"
          echo "resources: ${{ steps.filter.outputs.resources }}"
          echo "tssdk: ${{ steps.filter.outputs.tssdk }}"
